#打印sql
spring.shardingsphere.props.sql.show=true
#设置单次请求可适用的最大线程数，以决定是线程限制还是内存限制。增大该参数可提高数据库元数据加载速度（默认为1）
spring.shardingsphere.props.max.connections.size.per.query=3
#当使用inline分表策略时，是否允许范围查询，默认值: false
spring.shardingsphere.props.allow.range.query.with.inline.sharding=true

spring.shardingsphere.datasource.names=db0,db1

spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db0.jdbc-url=jdbc:mysql://localhost:4406/mydb0?characterEncoding=utf-8
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=111

spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db1.jdbc-url=jdbc:mysql://localhost:4406/mydb1?characterEncoding=utf-8
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=111

#2.设置为广播表，每个数据库都存在一份相同的数据，插入的时候每个库都插入,相对于1中的方式，插入的时候涉及分布式事务，执行逻辑复杂，但是毕竟rw比是很高的，这部分问题不大，另外一个好处是，运维层面简单。支持join（不跨库）
spring.shardingsphere.sharding.broadcast-tables=bill_item


#根据amount分库
spring.shardingsphere.sharding.tables.bill.database-strategy.inline.sharding-column= bill_amount
spring.shardingsphere.sharding.tables.bill.database-strategy.inline.algorithm-expression=db$->{bill_amount % 2}
#根据id分表
spring.shardingsphere.sharding.tables.bill.actual-data-nodes=db$->{0..1}.bill_$->{0..1}
spring.shardingsphere.sharding.tables.bill.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.bill.table-strategy.inline.algorithm-expression=bill_$->{id % 2}

spring.shardingsphere.sharding.tables.bill.key-generator.column=id
spring.shardingsphere.sharding.tables.bill.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.bill.key-generator.props.worker.id=123





#配置没有设置分片规则的表（如果存在不分库的表，必须设置，否则没有配置分片规则的表将随机到不同的库中，由于表缺失造成错误）
#1.设置默认数据源（但是每个数据源对应的表结构必须保留,而且一旦bill是根据分库字段查询，此时刚好命中另一个库，查询的数据就是空（不支持跨库join）！（这个时候可以让其他库的bill_item表作为从库，同步db0的bill_item解决这个问题，但是运维逻辑复杂，不可取）
#spring.shardingsphere.sharding.default-data-source-name=db0
#spring.shardingsphere.sharding.default-database-strategy.none
#spring.shardingsphere.sharding.default-table-strategy.none