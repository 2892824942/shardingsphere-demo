#打印sql
spring.shardingsphere.props.sql.show=true
#设置单次请求可适用的最大线程数，以决定是线程限制还是内存限制。增大该参数可提高数据库元数据加载速度（默认为1）
spring.shardingsphere.props.max.connections.size.per.query=3

spring.shardingsphere.datasource.names=master

spring.shardingsphere.datasource.master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master.jdbc-url=jdbc:mysql://localhost:4406/mydb?characterEncoding=utf-8
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=111

spring.shardingsphere.encrypt.tables.bill.columns.bill_name.cipherColumn=bill_name_cipher
spring.shardingsphere.encrypt.tables.bill.columns.bill_name.encryptor=encryptor_customize



spring.shardingsphere.encrypt.encryptors.encryptor_customize.type=sha256
spring.shardingsphere.encrypt.encryptors.encryptor_customize.props.aes.key.value


spring.shardingsphere.encrypt.encryptors.encryptor_aes.type=aes
spring.shardingsphere.encrypt.encryptors.encryptor_aes.props.aes.key.value=654321

spring.shardingsphere.props.query.with.cipher.column=true


#可以选择的加密方式
spring.shardingsphere.encrypt.encryptors.encryptor_md5.type=md5
spring.shardingsphere.encrypt.encryptors.encryptor_md5.props.md5.key.value=123456




#开启后，定义的逻辑字段，作为参数进入数据库调用encrypt()（无论修改还是查询），作为result返回调用解密方法decrypt()（默认）
#关闭后，定义的逻辑字段，作为修改的参数进入数据库调用加密方法，作为查询的参数进入数据库及作为result返回不会处理---适合密码场景
#(以上逻辑字段不适用id，存在分布式主键影响)
#spring.shardingsphere.props.query.with.cipher.column=false
#一般常见的有三种脱敏需求（query.with.cipher.column的开启及关闭的场景简称"场景"）
#正向对称加解密：进一次加密，出去一次解密  正向对称加解密：进一次解密，出去一次加密
#1.密码：数据库加密存储，不解密(md5)---适用以上原生场景（开启关闭都可以） md5加密
#2.明文主键: 业务防止自增主键在前端暴露，数据库明文存储，但是展示要加密展示---适用以上开启场景，但是要自定义加密类，encrypt()时解密，decrypt()时加密（和正常操作相反）  aes加密
#3.手机号： 防止内部员工泄露数据，数据库加密存储，但是展示要解密的明文（如果明文还需要例如132****4444这种形式的脱敏，这应该是业务层需要关心的，不应由数据中间件处理，要分清边界）---适用以上原生开启的场景    aes加密
#事实上：2业务场景，一旦在jdbc中间件层做了反向对称的加解密，就会导致业务层每次与数据库交互过程涉及到加解密定义的字段，都会加解密一次，事实上，这个加密过程，只有涉及前端展示的时候才有意义，这样不分内部逻辑还是
#展示逻辑，一棒子打死，显然性能高不到哪去（加解密比较耗时）

#综上：sharding在业务场景1，3比较适合，而在业务场景2中并不适合，事实上sharding sphere加密模块的设计也仅仅是为了业务场景1和3，业务场景2应在服务最上层序列化的时候做处理，这样只针对外部显示逻辑加解密，性能高。
#而且id加解密可能存在类型问题，如果之前的系统id的类型是Long，则加密后，对应id必须更改为String类型。这样需要更改的代码量很大。而自定义序列化完全可以屏蔽类型问题。





