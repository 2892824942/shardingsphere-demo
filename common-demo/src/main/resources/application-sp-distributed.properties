#使用分布式治理配置需要注意的：
#1.关闭pom中 <artifactId>sharding-jdbc-spring-boot-starter</artifactId>的依赖
#2.开启 pom中<artifactId>sharding-jdbc-orchestration-spring-boot-starter</artifactId>依赖
#3.选择对应的服务治理实现模块，这里使用的时zookeeper，开启<artifactId>sharding-orchestration-center-zookeeper-curator</artifactId>依赖
#如果使用nacos,则对应开启nacos依赖
#4.开启分布式治理模式，必须存在加密规则或者存在分库分表规则，否则报错！！（这个设定不合理-_-!）
#打印sql
spring.shardingsphere.props.sql.show=true
#设置单次请求可适用的最大线程数，以决定是线程限制还是内存限制。增大该参数可提高数据库元数据加载速度（默认为1）
spring.shardingsphere.props.max.connections.size.per.query=3

spring.shardingsphere.datasource.names=master0,slave0,master1,slave1

spring.shardingsphere.datasource.master0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master0.jdbc-url=jdbc:mysql://localhost:4406/mydb0?characterEncoding=utf-8
spring.shardingsphere.datasource.master0.username=root
spring.shardingsphere.datasource.master0.password=111

spring.shardingsphere.datasource.slave0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave0.jdbc-url=jdbc:mysql://localhost:5506/mydb0?characterEncoding=utf-8
spring.shardingsphere.datasource.slave0.username=root
spring.shardingsphere.datasource.slave0.password=111

spring.shardingsphere.datasource.master1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master1.jdbc-url=jdbc:mysql://localhost:4406/mydb1?characterEncoding=utf-8
spring.shardingsphere.datasource.master1.username=root
spring.shardingsphere.datasource.master1.password=111

spring.shardingsphere.datasource.slave1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave1.jdbc-url=jdbc:mysql://localhost:5506/mydb1?characterEncoding=utf-8
spring.shardingsphere.datasource.slave1.username=root
spring.shardingsphere.datasource.slave1.password=111


spring.shardingsphere.sharding.default-data-source-name=master0
#根据id分表
spring.shardingsphere.sharding.tables.bill.actual-data-nodes=master$->{0..1}.bill_$->{0..1}
spring.shardingsphere.sharding.tables.bill.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.bill.table-strategy.inline.algorithm-expression=bill_$->{Long.parseLong(String.valueOf(id)) % 2}

#根据amount分库
spring.shardingsphere.sharding.tables.bill.database-strategy.inline.sharding-column=bill_amount
spring.shardingsphere.sharding.tables.bill.database-strategy.inline.algorithm-expression=master$->{bill_amount % 2}

spring.shardingsphere.sharding.tables.bill.key-generator.column=id
spring.shardingsphere.sharding.tables.bill.key-generator.type=localAddKey
spring.shardingsphere.sharding.tables.bill.key-generator.props.worker.id=123

#指定master0为主库，slave0为它的从库
spring.shardingsphere.sharding.master-slave-rules.master0.master-data-source-name=master0
spring.shardingsphere.sharding.master-slave-rules.master0.slave-data-source-names=slave0
#指定master1为主库，slave1为它的从库
spring.shardingsphere.sharding.master-slave-rules.master1.master-data-source-name=master1
spring.shardingsphere.sharding.master-slave-rules.master1.slave-data-source-names=slave1

#配置
spring.shardingsphere.orchestration.registry.orchestration-type=config_center,registry_center
spring.shardingsphere.orchestration.registry.instance-type=zookeeper
spring.shardingsphere.orchestration.registry.server-lists=localhost:2181
spring.shardingsphere.orchestration.registry.namespace=sharding-namespace
spring.shardingsphere.orchestration.registry.props.overwrite=true


#配置没有设置分片规则的表（必须设置，否则没有配置分片规则的表将随机到同的库中，由于表缺失造成错误）
#spring.shardingsphere.sharding.broadcast-tables=bill_item


#设置默认分库策略（大批量的表使用同一套分库策略的时候使用，比如使用id，这里只是作为一种配置情况展示）
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=master0

#nacos zookeeper
# zk 存储的目录结构参考 orchestration 文件夹
# 这里的 test，指的是 {instance} 示例名称
# 配置的 namespace，即 ns，指的是 {namespace} 名称
# zk 路径中的 config、schema、logic_db、datasource、rule 为固定名称
# 两个 data.yaml，指的是 zk 中目录节点关联的数据，而非需要在 zk 中单独创建 data.yaml 节点
# 在使用此配置启动项目之前，需要在 zk 中添加相关配置，以如下配置为例，需要创建 /sharding-jdbc-orchestration/test/config/schema/logic_db

#spring.shardingsphere.orchestration.registry.digest= #连接注册中心的权限令牌。缺省为不需要权限验证
#spring.shardingsphere.orchestration.registry.operation-timeout-milliseconds= #操作超时的毫秒数，默认500毫秒
#spring.shardingsphere.orchestration.registry.max-retries= #连接失败后的最大重试次数，默认3次
#spring.shardingsphere.orchestration.registry.retry-interval-milliseconds= #重试间隔毫秒数，默认500毫秒
#spring.shardingsphere.orchestration.registry.time-to-live-seconds= #临时节点存活秒数，默认60秒
#spring.shardingsphere.orchestration.registry.props= #配置中心其它属性

